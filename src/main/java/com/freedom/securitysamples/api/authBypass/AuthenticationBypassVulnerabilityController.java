package com.freedom.securitysamples.api.authBypass;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * 认证绕过（权限绕过）漏洞示例控制器
 * 说明：认证绕过是指攻击者通过篡改请求参数、绕过验证逻辑等方式，
 *       在未经过正确身份验证或授权的情况下访问受保护资源的安全漏洞。
 * 常见风险：
 * 1. 未授权访问管理员功能或敏感数据
 * 2. 越权查看/修改其他用户信息
 * 3. 绕过登录直接访问系统核心功能
 * 修复原则：
 * 1. 基于会话/令牌的身份验证，而非依赖请求参数
 * 2. 严格的权限校验，验证当前登录用户是否有权限访问资源
 * 3. 敏感操作必须进行二次验证
 * 4. 使用安全框架（如Spring Security）实现标准化的认证授权
 */
@RestController
@RequestMapping("/security-example/auth-bypass")
public class AuthenticationBypassVulnerabilityController {

    /**
     * 不安全示例：基于请求参数的角色验证（权限绕过）
     * 漏洞点：
     * 1. 直接使用请求参数role判断是否为管理员，而非验证当前登录用户的实际角色
     * 2. 未验证用户是否已登录，任何人都可通过修改参数访问管理员信息
     * 攻击方式：
     * 发送请求：/security-example/auth-bypass/unsafe/admin-info?role=admin
     * 即可绕过验证获取管理员敏感信息
     * 修复建议：
     * 1. 从用户会话或令牌中获取角色信息，而非请求参数
     * 2. 使用@PreAuthorize等注解进行权限控制（需结合Spring Security）
     * 3. 确保用户已完成认证
     */
    @GetMapping("/unsafe/admin-info")
    public String unsafeAdminInfoByRoleParam(@RequestParam(required = false) String role) {
        // 危险实践：仅通过请求参数判断权限，无实际身份验证
        if (role != null && role.equals("admin")) {
            return "{'status':'success','data':'[管理员敏感信息] 系统配置、用户列表、权限设置','role':'admin'}";
        }
        return "{'status':'error','msg':'权限不足'}";
    }

    /**
     * 不安全示例：缺乏身份验证的用户信息访问（越权访问）
     * 漏洞点：
     * 1. 未验证请求者身份，任何人可通过修改userId参数访问任意用户信息
     * 2. 无权限边界检查，未确认请求者是否为用户本人或有访问权限的管理员
     * 攻击方式：
     * 发送请求：/security-example/auth-bypass/unsafe/user-profile?userId=10086
     * 即可访问ID为10086的用户信息，无需验证身份
     * 修复建议：
     * 1. 验证当前登录用户的ID与请求的userId是否一致（普通用户）
     * 2. 管理员访问需验证其是否有用户管理权限
     * 3. 从会话中获取当前登录用户ID，而非完全依赖请求参数
     */
    @GetMapping("/unsafe/user-profile")
    public String unsafeUserProfileAccess(@RequestParam(required = false) Integer userId) {
        // 危险实践：无身份验证和权限校验，直接根据参数返回用户信息
        if (userId != null) {
            return "{'status':'success','data':'用户ID " + userId + " 的个人信息','sensitiveData':'[敏感信息] 手机号、邮箱、地址等'}";
        }
        return "{'status':'error','msg':'用户不存在'}";
    }

    /**
     * 安全示例：基于会话的管理员信息访问
     * 安全实现要点：
     * 1. 从当前登录用户的会话中获取角色信息，而非请求参数
     * 2. 验证用户已完成认证
     * 3. 使用权限注解明确访问控制（需结合Spring Security）
     */
    // 实际应用中应添加@PreAuthorize("hasRole('ADMIN')")注解
    @GetMapping("/safe/admin-info")
    public String safeAdminInfoAccess() {
        // 模拟从会话中获取当前登录用户角色（实际应使用SecurityContext）
        String currentUserRole = getCurrentUserRoleFromSession(); // 从会话获取角色
        
        if ("ADMIN".equals(currentUserRole)) {
            return "{'status':'success','data':'[管理员敏感信息] 系统配置、用户列表、权限设置','role':'admin'}";
        }
        return "{'status':'error','msg':'权限不足：需管理员权限'}";
    }

    /**
     * 安全示例：带权限校验的用户信息访问
     * 安全实现要点：
     * 1. 验证用户已登录
     * 2. 检查当前登录用户ID与请求的userId是否一致，或是否有管理员权限
     */
    @GetMapping("/safe/user-profile")
    public String safeUserProfileAccess(@RequestParam Integer userId) {
        // 模拟从会话中获取当前登录用户信息（实际应使用SecurityContext）
        Integer currentUserId = getCurrentUserIdFromSession(); // 从会话获取当前用户ID
        String currentUserRole = getCurrentUserRoleFromSession(); // 从会话获取当前用户角色
        
        // 验证当前用户是否有权访问目标用户信息
        if (currentUserId == null) {
            return "{'status':'error','msg':'请先登录'}";
        }
        // 本人或管理员可访问
        if (currentUserId.equals(userId) || "ADMIN".equals(currentUserRole)) {
            return "{'status':'success','data':'用户ID " + userId + " 的个人信息','sensitiveData':'[已脱敏敏感信息]'}";
        }
        return "{'status':'error','msg':'权限不足：无法访问该用户信息'}";
    }

    // 以下为模拟方法，实际应通过安全框架获取
    private Integer getCurrentUserIdFromSession() {
        // 实际实现：从SecurityContextHolder获取当前登录用户ID
        return 1001; // 模拟当前登录用户ID
    }
    
    private String getCurrentUserRoleFromSession() {
        // 实际实现：从SecurityContextHolder获取当前登录用户角色
        return "USER"; // 模拟角色：USER/ADMIN
    }
}