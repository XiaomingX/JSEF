package com.freedom.securitysamples.api.brokenAccessControl;

import org.springframework.web.bind.annotation.*;

/**
 * 访问控制失效漏洞示例控制器
 * 说明：访问控制失效（Broken Access Control）是指系统未能正确验证用户是否有权限执行特定操作或访问特定资源，
 *       导致未授权用户可访问、修改或删除敏感信息，是Web应用中最常见且风险极高的安全漏洞之一。
 * 常见风险：
 * 1. 水平越权：普通用户访问/修改其他普通用户的资源（如查看他人订单、修改他人资料）
 * 2. 垂直越权：低权限用户执行高权限操作（如普通用户执行管理员功能）
 * 3. 未授权访问：未登录用户访问需要登录的资源
 * 修复原则：
 * 1. 严格身份验证：确保用户已登录且身份有效
 * 2. 细粒度权限检查：每个敏感操作前验证用户是否具备相应权限
 * 3. 资源所有权验证：确保用户只能访问/修改自己拥有的资源
 * 4. 最小权限原则：仅授予用户完成工作所必需的最小权限
 * 5. 统一权限控制：使用集中式权限管理框架，避免分散的权限判断逻辑
 */
@RestController
@RequestMapping("/security-example/broken-access-control")
public class BrokenAccessControlVulnerabilityController {

    /**
     * 不安全示例：水平越权访问用户信息
     * 漏洞点：
     * 1. 未验证访问者身份（是否登录）
     * 2. 未检查访问者是否为资源所有者（用户只能访问自己的信息）
     * 风险：攻击者可通过修改URL中的userId参数，查看系统中任何用户的敏感信息
     * 攻击示例：
     * - 普通用户本应只能访问自己的信息，却可通过访问/security-example/broken-access-control/unsafe/user/1001/info查看管理员信息
     * - 未登录用户也能直接访问该接口获取用户数据
     */
    @GetMapping("/unsafe/user/{userId}/info")
    public String unsafeGetUserInfo(@PathVariable("userId") String userId) {
        // 危险实践：没有任何身份验证和权限检查
        // 直接根据路径参数返回用户信息，允许任意用户访问任意用户数据
        if ("1001".equals(userId)) {
            return "{" +
                    "'userId':'1001'," +
                    "'username':'admin'," +
                    "'role':'administrator'," +
                    "'salary':'50000'" +  // 敏感信息被未授权访问
                    "}";
        } else if ("1002".equals(userId)) {
            return "{" +
                    "'userId':'1002'," +
                    "'username':'alice'," +
                    "'role':'user'," +
                    "'salary':'30000'" +  // 敏感信息被未授权访问
                    "}";
        }
        return "{'msg':'user not found'}";
    }

    /**
     * 不安全示例：垂直越权执行管理员操作
     * 漏洞点：
     * 1. 未验证调用者是否具有管理员权限
     * 2. 没有身份验证机制，任何人都可调用该接口
     * 风险：普通用户甚至未登录用户可执行本应只有管理员才能执行的敏感操作
     * 攻击示例：
     * - 普通用户发送POST请求到/security-example/broken-access-control/unsafe/admin/operation?action=deleteUser
     *   即可执行删除用户操作，无需管理员权限
     */
    @PostMapping("/unsafe/admin/operation")
    public String unsafeAdminOperation(@RequestParam String action) {
        // 危险实践：完全没有权限验证
        // 任何用户都能执行管理员操作，严重违反权限隔离原则
        if ("deleteUser".equals(action)) {
            return "{'msg':'user deleted successfully'}";  // 高危操作被未授权执行
        } else if ("modifyRole".equals(action)) {
            return "{'msg':'user role modified successfully'}";
        }
        return "{'msg':'unknown operation'}";
    }

    /**
     * 安全示例：用户信息访问（包含完整访问控制）
     * 修复点：
     * 1. 验证用户是否已登录（模拟）
     * 2. 检查访问者是否为资源所有者（只能访问自己的信息）
     * 实现逻辑：
     * - 从当前登录上下文获取用户ID（而非直接信任请求参数）
     * - 严格验证请求访问的资源是否属于当前登录用户
     */
    @GetMapping("/safe/user/{targetUserId}/info")
    public String safeGetUserInfo(@PathVariable("targetUserId") String targetUserId) {
        // 1. 模拟身份验证：实际应用中应通过Session、Token等验证用户已登录
        String currentLoginUserId = getCurrentLoginUserId();
        if (currentLoginUserId == null) {
            return "{'error':'请先登录'}";  // 未登录用户拒绝访问
        }

        // 2. 验证资源所有权：只能访问自己的信息
        if (!currentLoginUserId.equals(targetUserId)) {
            return "{'error':'权限不足：您只能访问自己的信息'}";  // 阻止水平越权
        }

        // 3. 验证通过，返回当前用户信息
        if ("1001".equals(targetUserId)) {
            return "{" +
                    "'userId':'1001'," +
                    "'username':'admin'," +
                    "'role':'administrator'," +
                    "'salary':'50000'" +
                    "}";
        } else if ("1002".equals(targetUserId)) {
            return "{" +
                    "'userId':'1002'," +
                    "'username':'alice'," +
                    "'role':'user'," +
                    "'salary':'30000'" +
                    "}";
        }
        return "{'msg':'user not found'}";
    }

    /**
     * 安全示例：管理员操作（包含权限验证）
     * 修复点：
     * 1. 验证用户是否已登录
     * 2. 检查用户是否具有管理员角色权限
     * 实现逻辑：
     * - 先验证身份，再验证角色权限
     * - 只有管理员角色才能执行敏感操作
     */
    @PostMapping("/safe/admin/operation")
    public String safeAdminOperation(@RequestParam String action) {
        // 1. 验证用户已登录
        String currentLoginUserId = getCurrentLoginUserId();
        if (currentLoginUserId == null) {
            return "{'error':'请先登录'}";
        }

        // 2. 验证用户是否为管理员角色
        if (!isAdmin(currentLoginUserId)) {
            return "{'error':'权限不足：仅管理员可执行此操作'}";  // 阻止垂直越权
        }

        // 3. 权限验证通过，执行操作
        if ("deleteUser".equals(action)) {
            return "{'msg':'user deleted successfully'}";
        } else if ("modifyRole".equals(action)) {
            return "{'msg':'user role modified successfully'}";
        }
        return "{'msg':'unknown operation'}";
    }

    // ---------------- 以下为模拟安全组件的辅助方法 ----------------
    /**
     * 模拟获取当前登录用户ID
     * 实际应用中应从Session、JWT Token等安全上下文获取
     */
    private String getCurrentLoginUserId() {
        // 模拟：假设当前有用户登录，返回其ID（实际应通过安全框架获取）
        // 此处仅为示例，真实环境需使用Spring Security等框架的认证机制
        return "1002";  // 可修改此值模拟不同用户登录
    }

    /**
     * 模拟检查用户是否为管理员
     * 实际应用中应从权限系统获取用户角色信息
     */
    private boolean isAdmin(String userId) {
        // 仅用户1001为管理员
        return "1001".equals(userId);
    }
}