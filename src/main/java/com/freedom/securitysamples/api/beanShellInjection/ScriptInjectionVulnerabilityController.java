package com.freedom.securitysamples.api.beanShellInjection;

import ognl.OgnlException;
import org.springframework.scripting.bsh.BshScriptEvaluator;
import org.springframework.scripting.support.StaticScriptSource;
import org.springframework.web.bind.annotation.*;

import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import java.io.IOException;

/**
 * 脚本注入与远程代码执行漏洞示例控制器
 * 说明：脚本注入是指攻击者通过输入恶意脚本代码，被应用程序不加区分地执行，
 *       可能导致远程代码执行（RCE），进而完全控制服务器。常见于支持动态脚本执行的功能中。
 * 常见风险：
 * 1. 服务器被完全控制（执行任意命令、读写文件、篡改系统配置）
 * 2. 敏感数据泄露或被篡改
 * 3. 服务拒绝（删除关键文件、耗尽系统资源）
 * 4. 横向渗透（攻击内网其他系统）
 * 修复原则：
 * 1. 禁止执行用户提供的任何脚本代码
 * 2. 若必须使用动态脚本，严格限制执行权限（最小权限原则）
 * 3. 使用白名单机制限制可执行的命令/方法/类
 * 4. 避免直接调用Runtime、ProcessBuilder等危险类
 * 5. 采用沙箱机制隔离脚本执行环境
 */
@RestController
@RequestMapping("/security-example/script-injection")
public class ScriptInjectionVulnerabilityController {

    /**
     * 不安全示例：直接执行用户提供的BeanShell脚本
     * 漏洞点：
     * 1. 未验证或过滤用户输入的脚本内容
     * 2. 直接将用户输入作为可执行脚本传递给BeanShell引擎
     * 风险：攻击者可注入任意代码，如执行系统命令、删除文件等
     * 示例攻击输入："import java.io.*; new FileOutputStream(\"/tmp/hacked.txt\").write(\"infected\".getBytes());"
     * 攻击后果：在服务器/tmp目录下创建hacked.txt文件，证明服务器可被任意操作
     */
    @GetMapping("/unsafe/evaluate-beanshell")
    public String unsafeEvaluateBeanshellScript(@RequestParam String userProvidedScript) throws OgnlException {
        // 危险实践：直接执行用户提供的BeanShell脚本
        BshScriptEvaluator scriptEvaluator = new BshScriptEvaluator();
        scriptEvaluator.evaluate(new StaticScriptSource(userProvidedScript));
        return "{\"message\": \"脚本执行完成（存在安全风险）\"}";
    }

    /**
     * 不安全示例：直接执行用户提供的JavaScript代码
     * 漏洞点：
     * 1. 允许用户输入作为完整JavaScript代码执行
     * 2. 未限制脚本引擎的权限和可访问的类
     * 风险：攻击者可通过JavaScript调用Java类执行恶意操作
     * 示例攻击输入："java.lang.Runtime.getRuntime().exec('rm -rf /tmp/*')"
     * 攻击后果：删除服务器/tmp目录下的所有文件
     */
    @PostMapping("/unsafe/evaluate-javascript")
    public String unsafeEvaluateJavascript(@RequestBody String userScriptCode) throws ScriptException {
        // 危险实践：直接执行用户提供的JavaScript代码
        ScriptEngine engine = new ScriptEngineManager().getEngineByName("JavaScript");
        Object result = engine.eval(userScriptCode);
        return "{\"result\": \"" + result + "\"}";
    }

    /**
     * 不安全示例：直接执行用户指定的系统命令
     * 漏洞点：
     * 1. 未验证用户输入的命令合法性
     * 2. 直接将用户输入作为系统命令执行
     * 风险：攻击者可执行任意系统命令，完全控制服务器
     * 示例攻击输入："rm -rf /var/www/html"
     * 攻击后果：删除网站根目录文件，导致服务瘫痪
     */
    @GetMapping("/unsafe/execute-system-command")
    public String unsafeExecuteSystemCommand(@RequestParam String userCommand) throws IOException {
        // 极度危险：直接执行用户提供的系统命令
        Runtime.getRuntime().exec(userCommand);
        return "{\"message\": \"命令已执行（存在严重安全风险）\"}";
    }

    /**
     * 不安全示例：动态加载并执行用户提供的Java类代码
     * 漏洞点：
     * 1. 将用户输入作为类定义的一部分编译执行
     * 2. 未限制类可执行的操作范围
     * 风险：攻击者可定义包含恶意代码的类，实现任意操作
     * 示例攻击输入："public static void main(String[] args) throws Exception { java.lang.Runtime.getRuntime().exec(\"id\"); }"
     * 攻击后果：执行系统id命令，获取服务器运行身份信息
     */
    @PostMapping("/unsafe/load-dynamic-class")
    public String unsafeLoadAndExecuteClass(@RequestBody String userClassCode) throws Exception {
        // 危险实践：动态加载并执行用户提供的类代码
        BshScriptEvaluator evaluator = new BshScriptEvaluator();
        evaluator.evaluate(new StaticScriptSource("class DynamicClass { " + userClassCode + " }"));
        return "{\"message\": \"动态类已加载（存在安全风险）\"}";
    }

    /**
     * 不安全示例：通过反射执行用户指定的类和方法
     * 漏洞点：
     * 1. 未验证用户指定的类和方法是否在允许列表中
     * 2. 直接反射调用任意类的任意方法
     * 风险：攻击者可调用危险类（如Runtime、ProcessBuilder）的方法执行恶意操作
     * 示例攻击输入：className=java.lang.Runtime, methodName=getRuntime
     * 攻击后果：获取Runtime实例，为后续执行系统命令做准备
     */
    @GetMapping("/unsafe/reflective-method-call")
    public String unsafeReflectiveCall(
            @RequestParam String targetClassName,
            @RequestParam String targetMethodName) throws Exception {
        // 危险实践：无限制的反射调用
        Class<?> targetClass = Class.forName(targetClassName);
        targetClass.getMethod(targetMethodName).invoke(null);
        return "{\"message\": \"反射方法已调用（存在安全风险）\"}";
    }

    /**
     * 不安全示例：评估用户提供的表达式（拼接为脚本执行）
     * 漏洞点：
     * 1. 将用户输入直接拼接为脚本表达式执行
     * 2. 未对表达式内容进行安全验证
     * 风险：攻击者可突破表达式限制，注入完整的恶意脚本
     * 示例攻击输入："1; import java.io.*; new File(\"/etc/passwd\").delete()"
     * 攻击后果：删除服务器的/etc/passwd文件，导致系统异常
     */
    @PostMapping("/unsafe/evaluate-expression")
    public String unsafeEvaluateExpression(@RequestBody String userExpression) {
        // 危险实践：将用户输入拼接为脚本执行
        BshScriptEvaluator evaluator = new BshScriptEvaluator();
        evaluator.evaluate(new StaticScriptSource("return " + userExpression + ";"));
        return "{\"message\": \"表达式已评估（存在安全风险）\"}";
    }
}