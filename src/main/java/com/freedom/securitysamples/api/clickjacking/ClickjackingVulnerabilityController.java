package com.freedom.securitysamples.api.clickjacking;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletResponse;

/**
 * 点击劫持(Clickjacking)漏洞示例控制器
 * 说明：点击劫持是一种视觉欺骗攻击，攻击者通过将目标网站嵌入到自己的页面中（通常使用iframe），
 *       并通过透明度、定位等CSS技巧隐藏目标网站，诱使用户点击看似无害的元素，实际点击的是被隐藏的
 *       目标网站上的敏感操作（如按钮、链接等）。
 * 常见风险：
 * 1. 用户在不知情的情况下执行敏感操作（如转账、授权、删除数据等）
 * 2. 绕过用户交互验证，执行未授权操作
 * 3. 损害用户利益和网站声誉
 * 修复原则：
 * 1. 设置X-Frame-Options响应头，限制页面被嵌入iframe的情况
 * 2. 使用Content-Security-Policy的frame-ancestors指令限制嵌入来源
 * 3. 实现frame-busting脚本作为辅助防御手段
 * 4. 对敏感操作增加二次确认机制
 */
@RestController
@RequestMapping("/security-example/click-jacking")
public class ClickjackingVulnerabilityController {

    /**
     * 不安全示例：无防御措施的页面
     * 漏洞点：
     * 1. 未设置任何防点击劫持的响应头（如X-Frame-Options）
     * 2. 页面包含敏感操作按钮，可被嵌入到恶意网站的iframe中
     * 攻击场景：
     * 攻击者创建一个看似正常的页面，将此页面通过iframe嵌入并设置透明度为0，
     * 同时在iframe上方覆盖一个诱骗性按钮，当用户点击诱骗按钮时，实际点击的是
     * 本页面中的"确认执行"按钮，导致非自愿操作。
     */
    @GetMapping("/unsafe/vulnerable-page")
    public String getVulnerablePage() {
        // 危险实践：未采取任何防点击劫持措施
        return "<html>" +
                "<head><title>无防护的敏感操作页面</title></head>" +
                "<body>" +
                "<h1>账户敏感操作</h1>" +
                "<p>此操作将转移您的账户余额</p>" +
                "<form action='/security-example/action/transfer-funds' method='POST'>" +
                "<button type='submit' style='padding: 20px; background: red; color: white;'>确认执行</button>" +
                "</form>" +
                "</body>" +
                "</html>";
    }

    /**
     * 安全示例：添加X-Frame-Options防御头的页面
     * 修复措施：
     * 1. 设置X-Frame-Options: DENY - 禁止任何网站将此页面嵌入iframe
     *    （可选值：DENY-完全禁止；SAMEORIGIN-仅允许同源网站嵌入；ALLOW-FROM uri-允许指定域名嵌入）
     * 2. 辅助添加frame-busting脚本，增强兼容性
     * 防御效果：
     * 主流浏览器会拒绝将设置了X-Frame-Options的页面嵌入到iframe中，
     * 从根本上阻止点击劫持攻击。
     */
    @GetMapping("/safe/protected-page")
    public String getSecurePage(HttpServletResponse response) {
        // 安全实践1：设置X-Frame-Options头，禁止页面被嵌入iframe
        response.setHeader("X-Frame-Options", "DENY");
        
        // 安全实践2：设置Content-Security-Policy，现代浏览器更推荐的方式
        response.setHeader("Content-Security-Policy", "frame-ancestors 'none'");
        
        // 安全实践3：添加frame-busting脚本作为辅助防御（兼容旧浏览器）
        String frameBustingScript = "if(top != self) { top.location = self.location; }";
        
        return "<html>" +
                "<head>" +
                "<title>受保护的敏感操作页面</title>" +
                "<script>" + frameBustingScript + "</script>" +
                "</head>" +
                "<body>" +
                "<h1>账户敏感操作</h1>" +
                "<p>此操作将转移您的账户余额</p>" +
                "<form action='/security-example/action/transfer-funds' method='POST'>" +
                "<button type='submit' style='padding: 20px; background: red; color: white;'>确认执行</button>" +
                "</form>" +
                "</body>" +
                "</html>";
    }
}