package com.freedom.securitysamples.api.businessLogicVuln;

import jakarta.servlet.http.HttpServletRequest;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * IP伪造（IP Spoofing）漏洞示例控制器
 * 说明：IP伪造是指攻击者通过篡改HTTP请求头中的IP相关字段，伪造客户端真实IP地址的攻击方式。
 *      应用若不当依赖可篡改的HTTP头获取IP，可能导致身份验证绕过、权限提升、日志欺骗等安全问题。
 * 常见风险：
 * 1. 绕过基于IP的访问控制（如限制特定IP段访问）
 * 2. 绕过IP黑名单/白名单机制
 * 3. 篡改审计日志，隐藏攻击来源
 * 4. 绕过API调用频率限制
 * 修复原则：
 * 1. 优先使用不可直接伪造的底层连接IP（request.getRemoteAddr()）
 * 2. 若必须使用代理头（如X-Forwarded-For），需在服务器层（如Nginx/Apache）配置可信代理
 * 3. 严格验证代理头格式，仅提取可信代理传递的IP
 * 4. 避免单纯依赖IP地址进行安全决策
 */
@RestController
@RequestMapping("/security-example/ip-spoofing")
public class IpSpoofingVulnerabilityController {

    /**
     * 安全示例：获取客户端真实IP（基础方式）
     * 安全原理：通过request.getRemoteAddr()获取的是直接连接到服务器的IP地址，
     *          该值由TCP连接决定，客户端无法直接篡改，伪造难度极高。
     * 适用场景：无代理服务器的直接连接环境
     */
    @RequestMapping("/safe/basic-ip")
    public String safeGetClientIpAddress(HttpServletRequest request) {
        // 安全实践：获取TCP连接的源IP，客户端无法直接伪造
        return "客户端IP（安全获取）：" + request.getRemoteAddr();
    }

    /**
     * 不安全示例：从X-Forwarded-For头获取IP
     * 漏洞点：X-Forwarded-For是一个非标准HTTP头，用于标识客户端原始IP，
     *        但可被客户端直接篡改，攻击者可随意伪造任意IP地址。
     * 攻击示例：攻击者可设置请求头X-Forwarded-For: 192.168.1.1（可信IP）
     * 风险：若用于身份验证或访问控制，可能导致未授权访问
     */
    @RequestMapping("/unsafe/from-x-forwarded-for")
    public String unsafeGetIpFromXForwardedFor(HttpServletRequest request) {
        // 危险实践：直接信任并使用可伪造的X-Forwarded-For头
        String clientIp = request.getHeader("X-Forwarded-For");
        return "客户端IP（不安全，来自X-Forwarded-For）：" + clientIp;
    }

    /**
     * 不安全示例：从X-Real-IP头获取IP
     * 漏洞点：X-Real-IP通常用于代理服务器传递客户端IP，但无标准规范，
     *        客户端可直接构造该头，伪造任意IP地址。
     * 常见场景：Nginx等代理服务器默认配置可能传递此头，但未限制客户端直接发送
     */
    @RequestMapping("/unsafe/from-x-real-ip")
    public String unsafeGetIpFromXRealIP(HttpServletRequest request) {
        // 危险实践：信任未验证的X-Real-IP头
        String clientIp = request.getHeader("X-Real-IP");
        return "客户端IP（不安全，来自X-Real-IP）：" + clientIp;
    }

    /**
     * 不安全示例：从Proxy-Client-IP头获取IP
     * 漏洞点：Proxy-Client-IP是部分代理服务器（如Apache mod_proxy）使用的头，
     *        非标准且可被客户端直接伪造，无任何安全性保障。
     */
    @RequestMapping("/unsafe/from-proxy-client-ip")
    public String unsafeGetIpFromProxyClientIp(HttpServletRequest request) {
        // 危险实践：使用非标准且可伪造的代理头
        String clientIp = request.getHeader("Proxy-Client-IP");
        return "客户端IP（不安全，来自Proxy-Client-IP）：" + clientIp;
    }

    /**
     * 不安全示例：从WL-Proxy-Client-IP头获取IP
     * 漏洞点：WL-Proxy-Client-IP是WebLogic服务器使用的代理头，
     *        仅在特定环境有效，且可被客户端直接伪造。
     */
    @RequestMapping("/unsafe/from-wl-proxy-client-ip")
    public String unsafeGetIpFromWLProxyClientIP(HttpServletRequest request) {
        // 危险实践：依赖特定服务器的非标准头
        String clientIp = request.getHeader("WL-Proxy-Client-IP");
        return "客户端IP（不安全，来自WL-Proxy-Client-IP）：" + clientIp;
    }

    /**
     * 不安全示例：从HTTP_CLIENT_IP头获取IP
     * 漏洞点：HTTP_CLIENT_IP是早期PHP等环境使用的非标准头，
     *        未被任何规范定义，可被客户端随意伪造。
     */
    @RequestMapping("/unsafe/from-http-client-ip")
    public String unsafeGetIpFromHTTPClientIP(HttpServletRequest request) {
        // 危险实践：使用已废弃的非标准头
        String clientIp = request.getHeader("HTTP_CLIENT_IP");
        return "客户端IP（不安全，来自HTTP_CLIENT_IP）：" + clientIp;
    }

    /**
     * 不安全示例：从HTTP_X_FORWARDED_FOR头获取IP
     * 漏洞点：HTTP_X_FORWARDED_FOR是X-Forwarded-For的大写形式（部分服务器会自动转换），
     *        本质与X-Forwarded-For相同，可被客户端直接伪造。
     */
    @RequestMapping("/unsafe/from-http-x-forwarded-for")
    public String unsafeGetIpFromHTTPXForwardedFor(HttpServletRequest request) {
        // 危险实践：信任大写形式的转发头，同样可被伪造
        String clientIp = request.getHeader("HTTP_X_FORWARDED_FOR");
        return "客户端IP（不安全，来自HTTP_X_FORWARDED_FOR）：" + clientIp;
    }

    /**
     * 推荐示例：安全获取IP地址（兼容代理环境）
     * 安全原理：
     * 1. 仅在信任的代理环境中使用转发头（需配合服务器配置）
     * 2. 对转发头进行有效性校验，排除"unknown"等无效值
     * 3. 当转发头不可用时，回退到request.getRemoteAddr()
     * 4. 处理多IP场景（X-Forwarded-For可能包含多个IP，取第一个）
     * 重要提示：需在代理服务器（如Nginx）配置中限制仅可信代理可设置转发头，
     *          例如Nginx中配置：proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
     *          并禁止客户端直接发送这些头信息。
     */
    @RequestMapping("/safe/recommended-ip")
    public String getIpAddressSecurely(HttpServletRequest request) {
        String ip = null;

        // 仅在已配置可信代理的环境下使用这些头（需服务器层配合）
        String[] proxyHeaders = {
                "X-Forwarded-For",
                "Proxy-Client-IP",
                "WL-Proxy-Client-IP",
                "HTTP_CLIENT_IP",
                "HTTP_X_FORWARDED_FOR"
        };

        // 尝试从代理头获取IP（需确保服务器层已过滤不可信请求）
        for (String header : proxyHeaders) {
            ip = request.getHeader(header);
            if (isValidIp(ip)) {
                break;
            }
        }

        // 所有代理头无效时，使用底层连接IP（最可靠）
        if (!isValidIp(ip)) {
            ip = request.getRemoteAddr();
        }

        // X-Forwarded-For可能包含多个IP（客户端IP, 代理1IP, 代理2IP...），取第一个有效IP
        if (ip != null && ip.contains(",")) {
            ip = ip.split(",")[0].trim();
        }

        return "客户端IP（安全推荐方式）：" + ip;
    }

    /**
     * IP地址有效性校验
     * 功能：过滤null、空值及"unknown"等无效标识
     */
    private boolean isValidIp(String ip) {
        return ip != null && !ip.trim().isEmpty() && !"unknown".equalsIgnoreCase(ip.trim());
    }
}
