package com.freedom.securitysamples.api.mvelInjection;

import cn.hutool.extra.expression.engine.mvel.MvelEngine;
import ognl.OgnlException;
import org.mvel2.MVEL;
import org.mvel2.integration.impl.MapVariableResolverFactory;
import org.springframework.web.bind.annotation.*;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

/**
 * MVEL注入漏洞示例控制器
 * 说明：MVEL是一种表达式语言，若直接执行用户可控的表达式，会导致远程代码执行（RCE）漏洞
 * 安全风险：攻击者可构造恶意表达式，执行系统命令、读写文件等危险操作
 * 修复建议：1. 避免使用用户输入作为表达式直接执行 2. 若必须使用，需严格过滤危险函数/类 3. 采用沙箱机制限制表达式权限
 */
@RestController
@RequestMapping("/security-example/mvel")
public class MvelInjectionVulnerabilityController {

    /**
     * 不安全示例1：使用Hutool的MvelEngine执行用户输入的表达式
     * 漏洞点：直接将用户传入的表达式字符串交给MVEL引擎执行，无任何过滤
     * 攻击示例：传入 "Runtime.getRuntime().exec('calc.exe')" 可执行计算器程序
     */
    @GetMapping("/unsafe/eval-with-hutool")
    public String unsafeMvelEvalByHutool(@RequestParam String userInputExpression) throws OgnlException {
        // 创建MVEL引擎实例
        MvelEngine mvelEngine = new MvelEngine();
        // 危险操作：直接执行用户输入的表达式
        mvelEngine.eval(userInputExpression, null);
        return "{\"status\":\"表达式执行完成（不安全）\"}";
    }

    /**
     * 不安全示例2：直接调用MVEL静态方法执行用户表达式
     * 漏洞点：MVEL.eval()直接处理用户输入，允许调用任意Java方法
     * 风险场景：攻击者可注入表达式访问系统资源，如读取/etc/passwd
     */
    @GetMapping("/unsafe/eval-direct")
    public String unsafeMvelDirectEval(@RequestParam String userInputExpression) throws OgnlException {
        // 危险操作：无验证执行用户提供的表达式
        MVEL.eval(userInputExpression);
        return "{\"status\":\"表达式执行完成（不安全）\"}";
    }

    /**
     * 不安全示例3：执行预编译的用户表达式
     * 漏洞点：编译后的表达式仍会执行用户注入的恶意代码，编译过程无法过滤危险内容
     * 攻击特点：预编译仅提升执行效率，不解决安全问题
     */
    @GetMapping("/unsafe/eval-compiled")
    public String unsafeMvelCompiledEval(@RequestParam String userInputExpression) {
        // 编译用户输入的表达式（仍存在安全风险）
        Serializable compiledExpression = MVEL.compileExpression(userInputExpression);
        // 执行编译后的恶意表达式
        MVEL.executeExpression(compiledExpression);
        return "{\"status\":\"编译后的表达式执行完成（不安全）\"}";
    }

    /**
     * 不安全示例4：带变量的MVEL表达式执行
     * 漏洞点：即使提供变量环境，用户仍可通过表达式访问外部类（如java.lang.Runtime）
     * 风险放大：变量可能被恶意表达式篡改或滥用
     */
    @PostMapping("/unsafe/eval-with-variables")
    public String unsafeMvelEvalWithVars(@RequestBody Map<String, Object> requestData) {
        // 从请求中获取用户提供的表达式和变量
        String userExpression = (String) requestData.get("expression");
        Map<String, Object> variables = (Map<String, Object>) requestData.get("variables");
        
        // 危险操作：在变量环境中执行用户表达式
        MVEL.eval(userExpression, variables);
        return "{\"status\":\"带变量的表达式执行完成（不安全）\"}";
    }

    /**
     * 不安全示例5：使用变量解析器执行用户表达式
     * 漏洞点：MapVariableResolverFactory无法阻止表达式访问系统类，仍存在RCE风险
     * 原理：MVEL表达式默认可访问Java标准库，无需显式导入
     */
    @GetMapping("/unsafe/eval-with-resolver")
    public String unsafeMvelEvalWithResolver(@RequestParam String userInputExpression) {
        Map<String, Object> variables = new HashMap<>();
        MapVariableResolverFactory variableResolver = new MapVariableResolverFactory(variables);
        
        // 危险操作：通过解析器执行用户表达式
        MVEL.eval(userInputExpression, variableResolver);
        return "{\"status\":\"使用解析器的表达式执行完成（不安全）\"}";
    }

    /**
     * 不安全示例6：MVEL模板解析漏洞
     * 漏洞点：模板引擎同样会执行表达式中的代码，攻击者可注入恶意片段
     * 攻击示例：模板中包含 "@{Runtime.getRuntime().exec('whoami')}" 会执行系统命令
     */
    @GetMapping("/unsafe/template-eval")
    public String unsafeMvelTemplateEval(@RequestParam String userInputTemplate) {
        // 危险操作：解析包含恶意代码的用户模板
        org.mvel2.templates.TemplateRuntime.eval(userInputTemplate, new HashMap<>());
        return "{\"status\":\"模板解析完成（不安全）\"}";
    }

    /**
     * 不安全示例7：动态方法调用注入
     * 漏洞点：将用户输入的类名和方法名拼接为表达式执行，导致任意方法调用
     * 风险场景：攻击者传入 "java.lang.Runtime" 和 "exec" 可执行系统命令
     */
    @GetMapping("/unsafe/dynamic-method-call")
    public String unsafeMvelDynamicMethodCall(
            @RequestParam String className, 
            @RequestParam String methodName) {
        // 危险拼接：用户输入直接拼接到表达式中
        String maliciousExpression = className + "." + methodName + "()";
        MVEL.eval(maliciousExpression);
        return "{\"status\":\"动态方法调用执行完成（不安全）\"}";
    }

    /**
     * 不安全示例8：条件表达式中的代码注入
     * 漏洞点：用户控制的条件被嵌入到if语句中，导致恶意代码执行
     * 攻击示例：条件参数传入 "true" 会触发执行calc.exe
     */
    @GetMapping("/unsafe/condition-code-injection")
    public String unsafeMvelConditionInjection(@RequestParam String userControlledCondition) {
        // 危险拼接：用户条件直接嵌入到可执行代码块
        String maliciousExpression = "if (" + userControlledCondition + ") { " +
                "Runtime.getRuntime().exec('calc.exe'); " +
                "}";
        MVEL.eval(maliciousExpression);
        return "{\"status\":\"条件表达式执行完成（不安全）\"}";
    }
}
