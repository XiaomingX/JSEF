package com.freedom.securitysamples.api.authorizationBypass;

import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

/**
 * 权限绕过漏洞示例控制器
 * 说明：权限绕过是指未正确实施访问控制机制，导致未授权用户能够访问或操作超出其权限范围的资源
 * 常见风险：
 * 1. 普通用户访问管理员功能（如查看/修改其他用户信息）
 * 2. 未登录用户访问需要认证的资源
 * 3. 用户越权操作（如修改不属于自己的数据）
 * 4. 敏感功能缺乏权限校验导致数据泄露或篡改
 * 修复原则：
 * 1. 实施基于角色的访问控制（RBAC）
 * 2. 所有敏感操作前必须进行权限校验
 * 3. 权限校验逻辑应放在业务逻辑执行之前
 * 4. 使用最小权限原则设计用户角色
 * 5. 对访问的资源进行所有权校验（确保用户只能操作自己的资源）
 */
@RestController
@RequestMapping("/security-example/authorization")
public class AuthorizationBypassVulnerabilityController {

    /**
     * 不安全示例：获取用户信息接口（无权限校验）
     * 漏洞点：
     * 1. 未验证访问者是否有权限查看目标用户信息
     * 2. 未检查访问者是否为管理员或目标用户本人
     * 风险：
     * 任何用户（包括未登录用户）都可通过修改userId参数查看系统中所有用户的敏感信息
     * 示例攻击：
     * 普通用户访问 /security-example/authorization/unsafe/user-info/1 可获取管理员信息
     */
    @GetMapping("/unsafe/user-info/{userId}")
    public String unsafeGetUserInfoWithoutAuthorization(@PathVariable String userId) {
        // 危险实践：直接返回用户信息，未进行任何权限校验
        return "{" +
                "'userId':'" + userId + "'," +
                "'username':'敏感用户名'," +
                "'role':'用户角色'," +
                "'salary':'敏感薪资信息'," +
                "'email':'敏感邮箱'" +
                "}";
    }

    /**
     * 不安全示例：获取所有用户列表接口（无权限校验）
     * 漏洞点：
     * 1. 未验证访问者是否为管理员角色
     * 2. 敏感资源（用户列表）完全暴露
     * 风险：
     * 普通用户可获取系统全部用户信息，为进一步攻击（如社会工程学攻击）提供数据支持
     * 示例攻击：
     * 未登录用户直接访问 /security-example/authorization/unsafe/all-users 可获取完整用户列表
     */
    @GetMapping("/unsafe/all-users")
    public String unsafeGetAllUsersWithoutAuthorization() {
        // 危险实践：未验证管理员权限，直接返回所有用户信息
        return "{" +
                "'users':[" +
                "{'id':'1','username':'admin','role':'administrator'}," +
                "{'id':'2','username':'user1','role':'user'}," +
                "{'id':'3','username':'user2','role':'user'}" +
                "]" +
                "}";
    }

    /**
     * 不安全示例：修改用户角色接口（无权限校验）
     * 漏洞点：
     * 1. 未验证访问者是否有修改用户角色的权限
     * 2. 未检查目标用户是否允许被当前访问者修改
     * 风险：
     * 普通用户可将自己或他人的角色提升为管理员，完全控制系统
     * 示例攻击：
     * 普通用户调用 /security-example/authorization/unsafe/update-role/自己的ID?newRole=administrator
     * 将自己提升为管理员
     */
    @PostMapping("/unsafe/update-role/{userId}")
    public String unsafeUpdateUserRoleWithoutAuthorization(
            @PathVariable String userId, 
            @RequestParam String newRole) {
        // 危险实践：未进行权限校验，直接执行角色修改操作
        return "{" +
                "'status':'success'," +
                "'message':'用户 " + userId + " 的角色已修改为 " + newRole + "'" +
                "}";
    }

    /**
     * 安全示例：获取用户信息接口（带权限校验）
     * 修复措施：
     * 1. 使用@PreAuthorize注解验证用户是否具有管理员角色或是否为本人
     * 2. 在业务逻辑中检查资源所有权
     * 原理：确保用户只能访问自己的信息或在拥有管理员权限时访问他人信息
     */
    @GetMapping("/safe/user-info/{userId}")
    @PreAuthorize("hasRole('ADMIN') or authentication.principal.username == #userId")
    public String safeGetUserInfoWithAuthorization(@PathVariable String userId) {
        // 安全实践：权限校验通过后才返回用户信息
        return "{" +
                "'userId':'" + userId + "'," +
                "'username':'敏感用户名'," +
                "'role':'用户角色'," +
                "'salary':'敏感薪资信息'," +
                "'email':'敏感邮箱'" +
                "}";
    }

    /**
     * 安全示例：获取所有用户列表接口（带管理员权限校验）
     * 修复措施：
     * 1. 使用@PreAuthorize注解严格限制只有管理员可访问
     * 2. 敏感操作添加日志记录，便于审计
     * 原理：确保只有授权的管理员才能查看用户列表
     */
    @GetMapping("/safe/all-users")
    @PreAuthorize("hasRole('ADMIN')")
    public String safeGetAllUsersWithAuthorization() {
        // 安全实践：仅管理员可访问的用户列表接口
        return "{" +
                "'users':[" +
                "{'id':'1','username':'admin','role':'administrator'}," +
                "{'id':'2','username':'user1','role':'user'}," +
                "{'id':'3','username':'user2','role':'user'}" +
                "]" +
                "}";
    }

    /**
     * 安全示例：修改用户角色接口（带严格权限校验）
     * 修复措施：
     * 1. 限制只有管理员可执行角色修改操作
     * 2. 对敏感角色变更（如提升为管理员）增加额外审批流程
     * 3. 所有角色修改操作记录审计日志
     * 原理：通过多层防护确保角色修改操作只能由授权管理员执行
     */
    @PostMapping("/safe/update-role/{userId}")
    @PreAuthorize("hasRole('ADMIN')")
    public String safeUpdateUserRoleWithAuthorization(
            @PathVariable String userId, 
            @RequestParam String newRole) {
        // 安全实践：验证管理员权限后才执行角色修改
        // 实际应用中还应检查新角色是否合法，避免越权提升
        return "{" +
                "'status':'success'," +
                "'message':'用户 " + userId + " 的角色已修改为 " + newRole + "'" +
                "}";
    }
}